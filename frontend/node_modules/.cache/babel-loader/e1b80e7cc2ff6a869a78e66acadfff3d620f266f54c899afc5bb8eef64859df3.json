{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sulta\\\\Desktop\\\\StackOverflow\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// src/pages/Dashboard.js\nimport React, { useEffect, useState } from 'react';\nimport API from '../api';\nimport PostForm from '../components/PostForm';\nimport io from 'socket.io-client';\nimport '../styles/Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Dashboard = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [showPostForm, setShowPostForm] = useState(false);\n  const fetchPosts = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const {\n        data\n      } = await API.get('/posts', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setPosts(data);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n    socket.on('newPostNotification', notification => {\n      fetchPosts();\n    });\n    return () => {\n      socket.off('newPostNotification');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"author-name\",\n        children: [\"Posted by: \", post.authorUsername]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Language: \", post.language]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), post.codeFileUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Code Snippet File: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: post.codeFileUrl,\n          download: true,\n          children: \"Download Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 32\n      }, this), post.uploadedFileUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded File: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: post.uploadedFileUrl,\n          download: true,\n          children: \"Download File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 36\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"z+huLpJJn/jZlDIM+NxiOL2Bmy8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","PostForm","io","jsxDEV","_jsxDEV","socket","Dashboard","_s","posts","setPosts","showPostForm","setShowPostForm","fetchPosts","token","localStorage","getItem","data","get","headers","Authorization","error","console","on","notification","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","authorUsername","title","language","codeFileUrl","href","download","uploadedFileUrl","_id","_c","$RefreshReg$"],"sources":["C:/Users/sulta/Desktop/StackOverflow/frontend/src/pages/Dashboard.js"],"sourcesContent":["// src/pages/Dashboard.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport API from '../api';\r\nimport PostForm from '../components/PostForm';\r\nimport io from 'socket.io-client';\r\nimport '../styles/Dashboard.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Dashboard = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [showPostForm, setShowPostForm] = useState(false);\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const { data } = await API.get('/posts', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setPosts(data);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n\r\n    socket.on('newPostNotification', (notification) => {\r\n      fetchPosts();\r\n    });\r\n\r\n    return () => {\r\n      socket.off('newPostNotification');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h2>Recent Posts</h2>\r\n      {posts.map((post) => (\r\n        <div key={post._id}>\r\n          <p className=\"author-name\">Posted by: {post.authorUsername}</p>\r\n          <h3>{post.title}</h3>\r\n          <p>Language: {post.language}</p>\r\n          {post.codeFileUrl && <p>Code Snippet File: <a href={post.codeFileUrl} download>Download Code</a></p>}\r\n          {post.uploadedFileUrl && <p>Uploaded File: <a href={post.uploadedFileUrl} download>Download File</a></p>}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}